AWSTemplateFormatVersion: '2010-09-09'
Description: 'AWS Cognito authentication setup for VisualForge AI'

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues: [dev, staging, prod]

  DomainName:
    Type: String
    Default: ''
    Description: Custom domain name for the application (e.g., app.visualforge.ai)

  GoogleClientId:
    Type: String
    Default: ''
    Description: Google OAuth client ID (optional)

  GoogleClientSecret:
    Type: String
    Default: ''
    NoEcho: true
    Description: Google OAuth client secret (optional)

Conditions:
  HasCustomDomain: !Not [!Equals [!Ref DomainName, '']]
  HasGoogleOAuth: !And
    - !Not [!Equals [!Ref GoogleClientId, '']]
    - !Not [!Equals [!Ref GoogleClientSecret, '']]

Resources:
  # Cognito User Pool
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub "${Environment}-visualforge-users"
      AliasAttributes:
        - email
      AutoVerifiedAttributes:
        - email
      UsernameConfiguration:
        CaseSensitive: false
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireUppercase: true
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: false
      Schema:
        - Name: email
          AttributeDataType: String
          Required: true
          Mutable: true
        - Name: name
          AttributeDataType: String
          Required: false
          Mutable: true
        - Name: stripe_customer_id
          AttributeDataType: String
          Required: false
          Mutable: true
      UserPoolTags:
        Environment: !Ref Environment
        Application: VisualForge

  # Cognito User Pool Domain
  UserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      UserPoolId: !Ref UserPool
      Domain: !Sub "${Environment}-visualforge-auth"

  # Cognito Identity Provider for Google (if configured)
  GoogleIdentityProvider:
    Type: AWS::Cognito::UserPoolIdentityProvider
    Condition: HasGoogleOAuth
    Properties:
      UserPoolId: !Ref UserPool
      ProviderName: Google
      ProviderType: Google
      ProviderDetails:
        client_id: !Ref GoogleClientId
        client_secret: !Ref GoogleClientSecret
        authorize_scopes: openid email profile
      AttributeMapping:
        email: email
        name: name
        username: sub

  # Cognito User Pool Client (Web App)
  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    DependsOn: GoogleIdentityProvider
    Properties:
      ClientName: !Sub "${Environment}-visualforge-web-client"
      UserPoolId: !Ref UserPool
      GenerateSecret: false
      ExplicitAuthFlows:
        - ALLOW_USER_SRP_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_USER_PASSWORD_AUTH
      SupportedIdentityProviders: !If
        - HasGoogleOAuth
        - [COGNITO, Google]
        - [COGNITO]
      CallbackURLs: !If
        - HasCustomDomain
        - [!Sub "https://${DomainName}", !Sub "https://${DomainName}/callback"]
        - ["http://localhost:5176", "http://localhost:5176/callback"]
      LogoutURLs: !If
        - HasCustomDomain
        - [!Sub "https://${DomainName}", !Sub "https://${DomainName}/logout"]
        - ["http://localhost:5176", "http://localhost:5176/logout"]
      AllowedOAuthFlows:
        - code
      AllowedOAuthScopes:
        - openid
        - email
        - profile
      AllowedOAuthFlowsUserPoolClient: true
      PreventUserExistenceErrors: ENABLED
      TokenValidityUnits:
        AccessToken: hours
        IdToken: hours
        RefreshToken: days
      AccessTokenValidity: 1
      IdTokenValidity: 1
      RefreshTokenValidity: 30

  # Cognito Identity Pool
  IdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      IdentityPoolName: !Sub "${Environment}_visualforge_identity"
      AllowUnauthenticatedIdentities: false
      CognitoIdentityProviders:
        - ClientId: !Ref UserPoolClient
          ProviderName: !GetAtt UserPool.ProviderName

  # IAM roles for authenticated and unauthenticated users
  AuthenticatedRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${Environment}-visualforge-authenticated-role"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Federated: cognito-identity.amazonaws.com
            Action: sts:AssumeRoleWithWebIdentity
            Condition:
              StringEquals:
                'cognito-identity.amazonaws.com:aud': !Ref IdentityPool
              'ForAnyValue:StringLike':
                'cognito-identity.amazonaws.com:amr': authenticated
      Policies:
        - PolicyName: CognitoAuthenticatedPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - cognito-sync:*
                  - cognito-identity:*
                Resource: '*'

  UnauthenticatedRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${Environment}-visualforge-unauthenticated-role"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Federated: cognito-identity.amazonaws.com
            Action: sts:AssumeRoleWithWebIdentity
            Condition:
              StringEquals:
                'cognito-identity.amazonaws.com:aud': !Ref IdentityPool
              'ForAnyValue:StringLike':
                'cognito-identity.amazonaws.com:amr': unauthenticated
      Policies:
        - PolicyName: CognitoUnauthenticatedPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Deny
                Action: '*'
                Resource: '*'

  # Identity Pool Role Attachment
  IdentityPoolRoleAttachment:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties:
      IdentityPoolId: !Ref IdentityPool
      Roles:
        authenticated: !GetAtt AuthenticatedRole.Arn
        unauthenticated: !GetAtt UnauthenticatedRole.Arn

  # Store Cognito configuration in Secrets Manager
  CognitoSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub "${Environment}/visualforge/cognito"
      Description: Cognito configuration for VisualForge AI
      SecretString: !Sub |
        {
          "userPoolId": "${UserPool}",
          "clientId": "${UserPoolClient}",
          "identityPoolId": "${IdentityPool}",
          "region": "${AWS::Region}",
          "domain": "${UserPoolDomain}.auth.${AWS::Region}.amazoncognito.com"
        }

Outputs:
  UserPoolId:
    Description: Cognito User Pool ID
    Value: !Ref UserPool
    Export:
      Name: !Sub "${Environment}-cognito-user-pool-id"

  UserPoolClientId:
    Description: Cognito User Pool Client ID
    Value: !Ref UserPoolClient
    Export:
      Name: !Sub "${Environment}-cognito-client-id"

  IdentityPoolId:
    Description: Cognito Identity Pool ID
    Value: !Ref IdentityPool
    Export:
      Name: !Sub "${Environment}-cognito-identity-pool-id"

  UserPoolDomain:
    Description: Cognito User Pool Domain
    Value: !Sub "${UserPoolDomain}.auth.${AWS::Region}.amazoncognito.com"
    Export:
      Name: !Sub "${Environment}-cognito-domain"

  CognitoSecretArn:
    Description: Cognito configuration secret ARN
    Value: !Ref CognitoSecret
    Export:
      Name: !Sub "${Environment}-cognito-secret-arn"

  AuthURL:
    Description: Cognito hosted UI URL
    Value: !Sub "https://${UserPoolDomain}.auth.${AWS::Region}.amazoncognito.com/login?client_id=${UserPoolClient}&response_type=code&scope=openid+email+profile&redirect_uri=https://${DomainName}"
    Export:
      Name: !Sub "${Environment}-cognito-auth-url"