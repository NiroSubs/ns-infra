AWSTemplateFormatVersion: '2010-09-09'
Description: 'AWS Secrets Manager configuration for Google OAuth and organization secrets'

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - staging
      - production
    Description: Environment name
  
  OrganizationName:
    Type: String
    Default: visualforge
    Description: Organization name for secret naming

Resources:
  # Master secret for Google OAuth credentials
  GoogleOAuthSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub '${OrganizationName}/${Environment}/oauth/google'
      Description: Google OAuth credentials for all VisualForge products
      SecretString: !Sub |
        {
          "client_id": "PENDING_SETUP.apps.googleusercontent.com",
          "client_secret": "PENDING_SETUP",
          "project_id": "visualforge-${Environment}",
          "auth_uri": "https://accounts.google.com/o/oauth2/auth",
          "token_uri": "https://oauth2.googleapis.com/token",
          "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
          "redirect_uris": [
            "https://${Environment}.visualforge.ai/callback",
            "http://localhost:5173/callback",
            "http://localhost:5176/callback"
          ],
          "javascript_origins": [
            "https://${Environment}.visualforge.ai",
            "http://localhost:5173",
            "http://localhost:5176"
          ]
        }
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Organization
          Value: !Ref OrganizationName
        - Key: Purpose
          Value: OAuth

  # Cognito configuration secret
  CognitoConfigSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub '${OrganizationName}/${Environment}/cognito/config'
      Description: Cognito configuration for VisualForge products
      SecretString: !Sub |
        {
          "user_pool_id": "us-east-1_H9ZWvtTNg",
          "client_id": "1nufa1so5bp1rjki3td1rr2f49",
          "region": "us-east-1",
          "domain": "visualforge-auth-${Environment}",
          "identity_providers": ["Google", "COGNITO"]
        }
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Organization
          Value: !Ref OrganizationName

  # GitHub Actions credentials
  GitHubActionsSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub '${OrganizationName}/${Environment}/github/actions'
      Description: Credentials for GitHub Actions pipelines
      SecretString: !Sub |
        {
          "aws_access_key_id": "PENDING_SETUP",
          "aws_secret_access_key": "PENDING_SETUP",
          "aws_region": "us-east-1",
          "aws_account_id": "816454053517"
        }
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Organization
          Value: !Ref OrganizationName

  # Organization-wide API keys
  OrganizationAPIKeys:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub '${OrganizationName}/shared/api-keys'
      Description: Shared API keys for all environments
      SecretString: |
        {
          "stripe_publishable_key": "PENDING_SETUP",
          "stripe_secret_key": "PENDING_SETUP",
          "sendgrid_api_key": "PENDING_SETUP",
          "datadog_api_key": "PENDING_SETUP",
          "sentry_dsn": "PENDING_SETUP"
        }
      Tags:
        - Key: Organization
          Value: !Ref OrganizationName
        - Key: Shared
          Value: 'true'

  # Database credentials
  DatabaseSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub '${OrganizationName}/${Environment}/database/credentials'
      Description: Database credentials for VisualForge
      GenerateSecretString:
        SecretStringTemplate: '{"username": "postgres"}'
        GenerateStringKey: 'password'
        PasswordLength: 32
        ExcludeCharacters: '"@/\'
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Organization
          Value: !Ref OrganizationName

  # IAM Role for accessing secrets from Lambda/EC2
  SecretsAccessRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${OrganizationName}-${Environment}-secrets-access-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
                - ec2.amazonaws.com
                - ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
          - Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root'
            Action: sts:AssumeRole
            Condition:
              StringEquals:
                'sts:ExternalId': !Ref OrganizationName
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: SecretsAccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                  - secretsmanager:DescribeSecret
                Resource:
                  - !Ref GoogleOAuthSecret
                  - !Ref CognitoConfigSecret
                  - !Ref GitHubActionsSecret
                  - !Ref OrganizationAPIKeys
                  - !Ref DatabaseSecret
              - Effect: Allow
                Action:
                  - kms:Decrypt
                Resource: !Sub 'arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/*'
                Condition:
                  StringEquals:
                    'kms:ViaService': !Sub 'secretsmanager.${AWS::Region}.amazonaws.com'

  # IAM Policy for GitHub Actions
  GitHubActionsPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub '${OrganizationName}-github-actions-secrets-policy'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - secretsmanager:GetSecretValue
              - secretsmanager:DescribeSecret
            Resource:
              - !Ref GoogleOAuthSecret
              - !Ref CognitoConfigSecret
              - !Ref GitHubActionsSecret
              - !Ref OrganizationAPIKeys
          - Effect: Allow
            Action:
              - secretsmanager:ListSecrets
            Resource: '*'
            Condition:
              StringLike:
                'secretsmanager:Name': !Sub '${OrganizationName}/*'
      Roles:
        - !Ref SecretsAccessRole

  # Lambda function to rotate secrets
  SecretRotationFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${OrganizationName}-${Environment}-secret-rotation'
      Handler: index.handler
      Role: !GetAtt SecretRotationRole.Arn
      Runtime: nodejs18.x
      Timeout: 30
      Code:
        ZipFile: |
          const AWS = require('aws-sdk');
          const secretsManager = new AWS.SecretsManager();
          
          exports.handler = async (event) => {
            console.log('Secret rotation triggered:', event);
            
            const { Step, SecretId, Token } = event;
            
            try {
              switch (Step) {
                case 'createSecret':
                  await createSecret(SecretId, Token);
                  break;
                case 'setSecret':
                  await setSecret(SecretId, Token);
                  break;
                case 'testSecret':
                  await testSecret(SecretId, Token);
                  break;
                case 'finishSecret':
                  await finishSecret(SecretId, Token);
                  break;
                default:
                  throw new Error(`Unknown step: ${Step}`);
              }
            } catch (error) {
              console.error('Rotation failed:', error);
              throw error;
            }
          };
          
          async function createSecret(secretId, token) {
            // Generate new secret value
            console.log('Creating new secret version...');
            // Implementation here
          }
          
          async function setSecret(secretId, token) {
            // Set the new secret in the service
            console.log('Setting new secret...');
            // Implementation here
          }
          
          async function testSecret(secretId, token) {
            // Test the new secret
            console.log('Testing new secret...');
            // Implementation here
          }
          
          async function finishSecret(secretId, token) {
            // Mark the new secret as current
            console.log('Finalizing secret rotation...');
            // Implementation here
          }

  SecretRotationRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: SecretRotationPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                  - secretsmanager:DescribeSecret
                  - secretsmanager:PutSecretValue
                  - secretsmanager:UpdateSecretVersionStage
                Resource: !Sub 'arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${OrganizationName}/*'

Outputs:
  GoogleOAuthSecretArn:
    Description: ARN of Google OAuth secret
    Value: !Ref GoogleOAuthSecret
    Export:
      Name: !Sub '${AWS::StackName}-GoogleOAuthSecretArn'
  
  CognitoConfigSecretArn:
    Description: ARN of Cognito configuration secret
    Value: !Ref CognitoConfigSecret
    Export:
      Name: !Sub '${AWS::StackName}-CognitoConfigSecretArn'
  
  SecretsAccessRoleArn:
    Description: ARN of the role for accessing secrets
    Value: !GetAtt SecretsAccessRole.Arn
    Export:
      Name: !Sub '${AWS::StackName}-SecretsAccessRoleArn'
  
  OrganizationAPIKeysArn:
    Description: ARN of organization API keys secret
    Value: !Ref OrganizationAPIKeys
    Export:
      Name: !Sub '${AWS::StackName}-OrganizationAPIKeysArn'
  
  DatabaseSecretArn:
    Description: ARN of database credentials secret
    Value: !Ref DatabaseSecret
    Export:
      Name: !Sub '${AWS::StackName}-DatabaseSecretArn'