AWSTemplateFormatVersion: '2010-09-09'
Description: 'Complete Staging Environment Infrastructure for VisualForge - All Resources'

Parameters:
  Environment:
    Type: String
    Default: staging
    Description: Environment name
  
  GoogleClientId:
    Type: String
    Default: 'TO_BE_CONFIGURED'
    Description: Google OAuth Client ID
    NoEcho: true
  
  GoogleClientSecret:
    Type: String
    Default: 'TO_BE_CONFIGURED'
    Description: Google OAuth Client Secret
    NoEcho: true
  
  StripePublishableKey:
    Type: String
    Default: 'pk_test_TO_BE_CONFIGURED'
    Description: Stripe Publishable Key (Test)
    NoEcho: false
  
  StripeSecretKey:
    Type: String
    Default: 'sk_test_TO_BE_CONFIGURED'
    Description: Stripe Secret Key (Test)
    NoEcho: true
  
  AlertEmail:
    Type: String
    Default: 'alerts@visualforge.ai'
    Description: Email for CloudWatch alerts

Resources:
  # ==========================================
  # Cognito User Pool and Authentication
  # ==========================================
  
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub '${Environment}-visualforge-users'
      UsernameAttributes:
        - email
      AutoVerifiedAttributes:
        - email
      MfaConfiguration: 'OFF'
      Policies:
        PasswordPolicy:
          MinimumLength: 10
          RequireUppercase: true
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
      Schema:
        - Name: email
          AttributeDataType: String
          Required: true
          Mutable: false
        - Name: name
          AttributeDataType: String
          Required: true
          Mutable: true
        - Name: picture
          AttributeDataType: String
          Mutable: true
      AccountRecoverySetting:
        RecoveryMechanisms:
          - Name: verified_email
            Priority: 1
      EmailConfiguration:
        EmailSendingAccount: COGNITO_DEFAULT
      UserPoolTags:
        Environment: !Ref Environment
        Service: Auth
        ManagedBy: CloudFormation

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: !Sub '${Environment}-visualforge-web-client'
      UserPoolId: !Ref UserPool
      GenerateSecret: false
      RefreshTokenValidity: 30
      AccessTokenValidity: 1
      IdTokenValidity: 1
      TokenValidityUnits:
        RefreshToken: days
        AccessToken: hours
        IdToken: hours
      ExplicitAuthFlows:
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_USER_SRP_AUTH
      SupportedIdentityProviders:
        - COGNITO
        - !If [HasGoogleAuth, Google, !Ref AWS::NoValue]
      CallbackURLs:
        - !Sub 'https://${CloudFrontDistribution.DomainName}/callback'
        - !Sub 'https://${Environment}.visualforge.ai/callback'
      LogoutURLs:
        - !Sub 'https://${CloudFrontDistribution.DomainName}'
        - !Sub 'https://${Environment}.visualforge.ai'
      AllowedOAuthFlows:
        - code
        - implicit
      AllowedOAuthScopes:
        - email
        - openid
        - profile
      AllowedOAuthFlowsUserPoolClient: true
      PreventUserExistenceErrors: ENABLED
      EnableTokenRevocation: true

  GoogleIdentityProvider:
    Type: AWS::Cognito::UserPoolIdentityProvider
    Condition: HasGoogleAuth
    Properties:
      UserPoolId: !Ref UserPool
      ProviderName: Google
      ProviderType: Google
      ProviderDetails:
        client_id: !Ref GoogleClientId
        client_secret: !Ref GoogleClientSecret
        authorize_scopes: 'profile email openid'
      AttributeMapping:
        email: email
        name: name
        picture: picture
        username: sub

  UserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: !Sub 'visualforge-auth-${Environment}'
      UserPoolId: !Ref UserPool

  # ==========================================
  # S3 Buckets for Frontend and Static Assets
  # ==========================================
  
  FrontendBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${Environment}-nirosubs-frontend'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      VersioningConfiguration:
        Status: Enabled
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldVersions
            Status: Enabled
            NoncurrentVersionExpirationInDays: 30
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Service
          Value: Frontend

  # Additional S3 buckets for microservices
  AuthBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${Environment}-ns-auth'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  DashboardBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${Environment}-ns-dashboard'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  PaymentsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${Environment}-ns-payments'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  UserBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${Environment}-ns-user'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  # ==========================================
  # CloudFront Distribution
  # ==========================================
  
  CloudFrontOAI:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Sub 'OAI for ${Environment} S3 bucket'

  FrontendBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref FrontendBucket
      PolicyDocument:
        Statement:
          - Sid: AllowCloudFrontOAI
            Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${CloudFrontOAI}'
            Action:
              - s3:GetObject
            Resource: !Sub '${FrontendBucket.Arn}/*'
          - Sid: AllowCloudFrontListBucket
            Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${CloudFrontOAI}'
            Action:
              - s3:ListBucket
            Resource: !GetAtt FrontendBucket.Arn

  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Comment: !Sub '${Environment} VisualForge Distribution'
        Enabled: true
        DefaultRootObject: index.html
        Origins:
          - Id: !Sub 'S3-${Environment}'
            DomainName: !GetAtt FrontendBucket.RegionalDomainName
            S3OriginConfig:
              OriginAccessIdentity: !Sub 'origin-access-identity/cloudfront/${CloudFrontOAI}'
        DefaultCacheBehavior:
          TargetOriginId: !Sub 'S3-${Environment}'
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          CachedMethods:
            - GET
            - HEAD
            - OPTIONS
          Compress: true
          CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6  # Managed-CachingOptimized
          OriginRequestPolicyId: 88a5eaf4-2fd4-4709-b370-b4c650ea3fcf  # Managed-CORS-S3Origin
        CustomErrorResponses:
          - ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: /index.html
            ErrorCachingMinTTL: 0
          - ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: /index.html
            ErrorCachingMinTTL: 0
        PriceClass: PriceClass_100
        ViewerCertificate:
          CloudFrontDefaultCertificate: true
        Logging:
          Bucket: !GetAtt LoggingBucket.DomainName
          Prefix: cloudfront/
        Tags:
          - Key: Environment
            Value: !Ref Environment
          - Key: Service
            Value: CDN

  # ==========================================
  # API Gateway
  # ==========================================
  
  ApiGateway:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: !Sub '${Environment}-visualforge-api'
      ProtocolType: HTTP
      CorsConfiguration:
        AllowOrigins:
          - !Sub 'https://${CloudFrontDistribution.DomainName}'
          - !Sub 'https://${Environment}.visualforge.ai'
          - '*'
        AllowMethods:
          - GET
          - POST
          - PUT
          - DELETE
          - OPTIONS
        AllowHeaders:
          - '*'
        ExposeHeaders:
          - x-request-id
        MaxAge: 86400
      Tags:
        Environment: !Ref Environment
        Service: API

  ApiStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref ApiGateway
      StageName: !Ref Environment
      AutoDeploy: true
      DefaultRouteSettings:
        ThrottlingBurstLimit: 100
        ThrottlingRateLimit: 50
      AccessLogSettings:
        DestinationArn: !GetAtt ApiLogGroup.Arn
        Format: '$context.requestId $context.requestTime $context.httpMethod $context.path $context.status'
      Tags:
        Environment: !Ref Environment

  # ==========================================
  # Lambda Functions and Roles
  # ==========================================
  
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${Environment}-visualforge-lambda-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess
      Policies:
        - PolicyName: SecretsAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource:
                  - !Ref CognitoSecret
                  - !Ref StripeSecret
                  - !Ref GoogleOAuthSecret
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:Query
                  - dynamodb:Scan
                  - dynamodb:DeleteItem
                Resource:
                  - !GetAtt PaymentsTable.Arn
                  - !GetAtt UsersTable.Arn
                  - !Sub '${PaymentsTable.Arn}/index/*'
                  - !Sub '${UsersTable.Arn}/index/*'
        - PolicyName: CognitoAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - cognito-idp:AdminGetUser
                  - cognito-idp:AdminCreateUser
                  - cognito-idp:AdminUpdateUserAttributes
                  - cognito-idp:AdminDeleteUser
                Resource: !GetAtt UserPool.Arn

  # Core Lambda
  CoreLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${Environment}-ns-core-lambda'
      Runtime: nodejs18.x
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          exports.handler = async (event) => {
            console.log('Event:', JSON.stringify(event));
            return {
              statusCode: 200,
              headers: {
                'Content-Type': 'application/json',
                'Access-Control-Allow-Origin': '*'
              },
              body: JSON.stringify({
                message: 'Core Lambda Response',
                environment: process.env.ENVIRONMENT,
                timestamp: new Date().toISOString(),
                status: 'healthy'
              })
            };
          };
      Environment:
        Variables:
          ENVIRONMENT: !Ref Environment
          NODE_ENV: production
          USER_POOL_ID: !Ref UserPool
          CLIENT_ID: !Ref UserPoolClient
      Timeout: 30
      MemorySize: 256
      TracingConfig:
        Mode: Active
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Service
          Value: Core

  # Auth Lambda
  AuthLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${Environment}-ns-auth-lambda'
      Runtime: nodejs18.x
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          exports.handler = async (event) => {
            return {
              statusCode: 200,
              headers: { 'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*' },
              body: JSON.stringify({ message: 'Auth Lambda', status: 'healthy' })
            };
          };
      Environment:
        Variables:
          ENVIRONMENT: !Ref Environment
          USER_POOL_ID: !Ref UserPool
          CLIENT_ID: !Ref UserPoolClient
      Timeout: 30
      MemorySize: 256
      TracingConfig:
        Mode: Active

  # Dashboard Lambda
  DashboardLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${Environment}-ns-dashboard-lambda'
      Runtime: nodejs18.x
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          exports.handler = async (event) => {
            return {
              statusCode: 200,
              headers: { 'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*' },
              body: JSON.stringify({ message: 'Dashboard Lambda', status: 'healthy' })
            };
          };
      Environment:
        Variables:
          ENVIRONMENT: !Ref Environment
      Timeout: 30
      MemorySize: 256
      TracingConfig:
        Mode: Active

  # Payments Lambda
  PaymentsLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${Environment}-ns-payments-lambda'
      Runtime: nodejs18.x
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          exports.handler = async (event) => {
            return {
              statusCode: 200,
              headers: { 'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*' },
              body: JSON.stringify({ message: 'Payments Lambda', status: 'healthy' })
            };
          };
      Environment:
        Variables:
          ENVIRONMENT: !Ref Environment
          STRIPE_SECRET_ARN: !Ref StripeSecret
      Timeout: 30
      MemorySize: 256
      TracingConfig:
        Mode: Active

  # User Lambda
  UserLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${Environment}-ns-user-lambda'
      Runtime: nodejs18.x
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          exports.handler = async (event) => {
            return {
              statusCode: 200,
              headers: { 'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*' },
              body: JSON.stringify({ message: 'User Lambda', status: 'healthy' })
            };
          };
      Environment:
        Variables:
          ENVIRONMENT: !Ref Environment
          USER_POOL_ID: !Ref UserPool
      Timeout: 30
      MemorySize: 256
      TracingConfig:
        Mode: Active

  # ==========================================
  # API Gateway Integrations and Routes
  # ==========================================
  
  # Core API Integration
  CoreIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref ApiGateway
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub 'arn:aws:apigatewayv2:${AWS::Region}:lambda:path/2015-03-31/functions/${CoreLambda.Arn}/invocations'
      PayloadFormatVersion: '2.0'

  CoreHealthRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ApiGateway
      RouteKey: 'GET /core/api/health'
      Target: !Sub 'integrations/${CoreIntegration}'

  CoreLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref CoreLambda
      Principal: apigateway.amazonaws.com
      Action: lambda:InvokeFunction
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/*'

  # Auth API Integration
  AuthIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref ApiGateway
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub 'arn:aws:apigatewayv2:${AWS::Region}:lambda:path/2015-03-31/functions/${AuthLambda.Arn}/invocations'
      PayloadFormatVersion: '2.0'

  AuthHealthRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ApiGateway
      RouteKey: 'GET /user/api/health'
      Target: !Sub 'integrations/${AuthIntegration}'

  AuthLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref AuthLambda
      Principal: apigateway.amazonaws.com
      Action: lambda:InvokeFunction
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/*'

  # Dashboard API Integration
  DashboardIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref ApiGateway
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub 'arn:aws:apigatewayv2:${AWS::Region}:lambda:path/2015-03-31/functions/${DashboardLambda.Arn}/invocations'
      PayloadFormatVersion: '2.0'

  DashboardHealthRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ApiGateway
      RouteKey: 'GET /dashboard/api/health'
      Target: !Sub 'integrations/${DashboardIntegration}'

  DashboardLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref DashboardLambda
      Principal: apigateway.amazonaws.com
      Action: lambda:InvokeFunction
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/*'

  # Payments API Integration
  PaymentsIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref ApiGateway
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub 'arn:aws:apigatewayv2:${AWS::Region}:lambda:path/2015-03-31/functions/${PaymentsLambda.Arn}/invocations'
      PayloadFormatVersion: '2.0'

  PaymentsHealthRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ApiGateway
      RouteKey: 'GET /payments/api/health'
      Target: !Sub 'integrations/${PaymentsIntegration}'

  PaymentsLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref PaymentsLambda
      Principal: apigateway.amazonaws.com
      Action: lambda:InvokeFunction
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/*'

  # ==========================================
  # DynamoDB Tables
  # ==========================================
  
  UsersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${Environment}-users'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: userId
          AttributeType: S
        - AttributeName: email
          AttributeType: S
        - AttributeName: createdAt
          AttributeType: N
      KeySchema:
        - AttributeName: userId
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: EmailIndex
          KeySchema:
            - AttributeName: email
              KeyType: HASH
          Projection:
            ProjectionType: ALL
        - IndexName: CreatedAtIndex
          KeySchema:
            - AttributeName: createdAt
              KeyType: HASH
            - AttributeName: userId
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      SSESpecification:
        SSEEnabled: true
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Service
          Value: Users

  PaymentsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${Environment}-payments'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: paymentId
          AttributeType: S
        - AttributeName: customerId
          AttributeType: S
        - AttributeName: createdAt
          AttributeType: N
      KeySchema:
        - AttributeName: paymentId
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: CustomerIndex
          KeySchema:
            - AttributeName: customerId
              KeyType: HASH
            - AttributeName: createdAt
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      SSESpecification:
        SSEEnabled: true
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Service
          Value: Payments

  # ==========================================
  # Secrets Manager
  # ==========================================
  
  CognitoSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub 'visualforge/${Environment}/cognito/config'
      Description: Cognito configuration for staging
      SecretString: !Sub |
        {
          "user_pool_id": "${UserPool}",
          "client_id": "${UserPoolClient}",
          "region": "${AWS::Region}",
          "domain": "visualforge-auth-${Environment}"
        }
      Tags:
        - Key: Environment
          Value: !Ref Environment

  GoogleOAuthSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub 'visualforge/${Environment}/oauth/google'
      Description: Google OAuth configuration for staging
      SecretString: !Sub |
        {
          "client_id": "${GoogleClientId}",
          "client_secret": "${GoogleClientSecret}",
          "redirect_uris": [
            "https://${CloudFrontDistribution.DomainName}/callback",
            "https://${Environment}.visualforge.ai/callback"
          ]
        }
      Tags:
        - Key: Environment
          Value: !Ref Environment

  StripeSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub 'visualforge/${Environment}/api-keys'
      Description: API keys for staging
      SecretString: !Sub |
        {
          "stripe_publishable_key": "${StripePublishableKey}",
          "stripe_secret_key": "${StripeSecretKey}",
          "environment": "${Environment}"
        }
      Tags:
        - Key: Environment
          Value: !Ref Environment

  # ==========================================
  # Monitoring and Logging
  # ==========================================
  
  LoggingBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${Environment}-visualforge-logs'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldLogs
            Status: Enabled
            ExpirationInDays: 30

  ApiLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/apigateway/${Environment}-visualforge-api'
      RetentionInDays: 7

  SNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub '${Environment}-visualforge-alerts'
      DisplayName: !Sub '${Environment} VisualForge Alerts'
      Subscription:
        - Endpoint: !Ref AlertEmail
          Protocol: email

  # CloudWatch Alarms
  CoreLambdaErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${Environment}-core-lambda-errors'
      AlarmDescription: High error rate for core Lambda
      MetricName: Errors
      Namespace: AWS/Lambda
      Dimensions:
        - Name: FunctionName
          Value: !Ref CoreLambda
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      Threshold: 10
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
        - !Ref SNSTopic

  ApiGateway4xxAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${Environment}-api-4xx-errors'
      AlarmDescription: High 4XX error rate
      MetricName: 4xx
      Namespace: AWS/ApiGateway
      Dimensions:
        - Name: ApiName
          Value: !Ref ApiGateway
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      Threshold: 50
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
        - !Ref SNSTopic

  ApiGateway5xxAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${Environment}-api-5xx-errors'
      AlarmDescription: High 5XX error rate
      MetricName: 5xx
      Namespace: AWS/ApiGateway
      Dimensions:
        - Name: ApiName
          Value: !Ref ApiGateway
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      Threshold: 10
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
        - !Ref SNSTopic

Conditions:
  HasGoogleAuth: !Not [!Equals [!Ref GoogleClientId, 'TO_BE_CONFIGURED']]

Outputs:
  CloudFrontURL:
    Description: CloudFront Distribution URL
    Value: !Sub 'https://${CloudFrontDistribution.DomainName}'
    Export:
      Name: !Sub '${Environment}-cloudfront-url'
  
  CloudFrontDistributionId:
    Description: CloudFront Distribution ID
    Value: !Ref CloudFrontDistribution
    Export:
      Name: !Sub '${Environment}-cloudfront-id'
  
  ApiEndpoint:
    Description: API Gateway Endpoint
    Value: !Sub 'https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${Environment}'
    Export:
      Name: !Sub '${Environment}-api-endpoint'
  
  UserPoolId:
    Description: Cognito User Pool ID
    Value: !Ref UserPool
    Export:
      Name: !Sub '${Environment}-user-pool-id'
  
  UserPoolClientId:
    Description: Cognito User Pool Client ID
    Value: !Ref UserPoolClient
    Export:
      Name: !Sub '${Environment}-user-pool-client-id'
  
  S3BucketName:
    Description: S3 Bucket for Frontend
    Value: !Ref FrontendBucket
    Export:
      Name: !Sub '${Environment}-frontend-bucket'
  
  CognitoSecretArn:
    Description: Cognito Secret ARN
    Value: !Ref CognitoSecret
    Export:
      Name: !Sub '${Environment}-cognito-secret-arn'
  
  StripeSecretArn:
    Description: Stripe Secret ARN
    Value: !Ref StripeSecret
    Export:
      Name: !Sub '${Environment}-stripe-secret-arn'